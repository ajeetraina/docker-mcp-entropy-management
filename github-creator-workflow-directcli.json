{
  "name": "GitHub Structure Creator (Direct MCP)",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "create-github-structure",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "github-deploy-trigger",
      "name": "GitHub Deploy Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "functionCode": "// Deploy Status - Log the deployment start\nconst inputData = $json.body || $json;\nconst companyName = inputData.company_name || 'Unknown Company';\nconst githubOwner = inputData.github_owner || 'unknown';\nconst repositoryName = inputData.repository_name || 'unknown-repo';\n\nconsole.log('=== GITHUB DEPLOYMENT STARTED ===');\nconsole.log('Company:', companyName);\nconsole.log('GitHub Owner:', githubOwner);\nconsole.log('Repository:', repositoryName);\nconsole.log('Domains:', (inputData.domains || []).length);\n\nreturn [{\n  company_name: companyName,\n  github_owner: githubOwner,\n  repository_name: repositoryName,\n  domains: inputData.domains || [],\n  deployment_status: 'started',\n  timestamp: new Date().toISOString()\n}];"
      },
      "id": "deploy-status",
      "name": "Deploy Status",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "functionCode": "// Prepare File Deployment - Generate all files for GitHub\nconst data = $json;\nconst companyName = data.company_name;\nconst githubOwner = data.github_owner;\nconst repositoryName = data.repository_name;\nconst domains = data.domains || [];\n\nconsole.log('=== PREPARING FILE DEPLOYMENT ===');\nconsole.log('Generating files for:', companyName);\n\n// Generate main README.md content\nconst mainReadme = `# ${companyName} - Business Operating System\\n\\n🏗️ **Systematic Business Organization**\\n\\nThis repository contains the complete Business Operating System (B-OS) for ${companyName}, organized using the systematic 0-9 framework for maximum clarity and zero entropy.\\n\\n## 📋 Business Domains\\n\\n${domains.map(domain => {\n  const subdomainText = domain.subdomains ? \n    domain.subdomains.map(sub => `- ${sub.number}: ${sub.name}`).join('\\n') : '';\n  \n  return `### ${domain.number} - ${domain.name}\\n${domain.content ? domain.content.join(', ') : 'Core business area'}\\n\\n**Subdomains:**\\n${subdomainText}\\n`;\n}).join('\\n')}\\n\\n## 🚀 Usage\\n\\nThis systematic organization eliminates the \"entropy tax\" by providing:\\n- Clear structure for all business information\\n- Consistent navigation across domains\\n- Systematic templates for each area\\n- AI-powered insights and automation\\n\\n**Generated by:** AI-Powered Entropy Management System\\n**Framework:** 0-9 Business Operating System\\n**Date:** ${new Date().toISOString().split('T')[0]}`;\n\n// Generate domain files\nconst domainFiles = domains.map(domain => {\n  const subdomainsList = domain.subdomains ? \n    Object.entries(domain.subdomains).map(([key, value]) => `## ${key}: ${value}\\n\\nContent for ${value} goes here.\\n`).join('\\n') : '';\n  \n  return {\n    path: `${domain.number}-${domain.name.toLowerCase().replace(/\\s+/g, '-')}/README.md`,\n    content: `# ${domain.number} - ${domain.name}\\n\\n${domain.content ? domain.content.join(' ') : 'Domain description'}\\n\\n${subdomainsList}\\n\\n---\\n*Part of ${companyName} Business Operating System*`\n  };\n});\n\n// Create structure files\nconst structureFiles = [\n  {\n    path: '.github/workflows/daily-entropy.yml',\n    content: `name: Business OS Maintenance\\n\\non:\\n  schedule:\\n    - cron: '0 9 * * *'  # Daily at 9 AM\\n  workflow_dispatch:\\n\\njobs:\\n  entropy-management:\\n    runs-on: ubuntu-latest\\n    steps:\\n      - uses: actions/checkout@v3\\n      - name: Process Daily Entropy\\n        run: echo \"Daily business organization automation\"`\n  },\n  {\n    path: '.gitignore',\n    content: `# Business OS\\n*.tmp\\n.env\\n.DS_Store\\nnode_modules/\\n*.log`\n  },\n  {\n    path: 'STRUCTURE.md',\n    content: `# ${companyName} - Business Structure\\n\\n## 0-9 Framework\\n\\n${domains.map(d => `- **${d.number}**: ${d.name}`).join('\\n')}\\n\\n## Navigation\\n\\nEach domain contains:\\n- README.md with overview\\n- Subdomain structure\\n- Templates and examples\\n- Action items and insights`\n  }\n];\n\nconsole.log('Files prepared:', domainFiles.length + structureFiles.length + 1);\n\nreturn [{\n  company_name: companyName,\n  github_owner: githubOwner,\n  repository_name: repositoryName,\n  domains: domains,\n  main_readme: mainReadme,\n  domain_files: domainFiles,\n  structure_files: structureFiles,\n  total_files: domainFiles.length + structureFiles.length + 1,\n  deployment_status: 'files_prepared'\n}];"
      },
      "id": "prepare-file-deployment",
      "name": "Prepare File Deployment",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [680, 300]
    },
    {
      "parameters": {
        "command": "bash",
        "arguments": "=-c \"echo '{{ $json.main_readme.replace(/'/g, \"'\\\"'\\\"'\") }}' > /tmp/readme_{{ $json.repository_name }}.md && docker mcp tools call create_or_update_file owner='{{ $json.github_owner }}' repo='{{ $json.repository_name }}' path='README.md' content=\\\"$(cat /tmp/readme_{{ $json.repository_name }}.md)\\\" message='Initial commit: AI-generated Business OS structure' branch='main' && rm -f /tmp/readme_{{ $json.repository_name }}.md\"",
        "options": {}
      },
      "id": "update-main-readme",
      "name": "Update Main README",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [900, 300]
    },
    {
      "parameters": {
        "batchSize": 1,
        "options": {}
      },
      "id": "batch-domain-files",
      "name": "Batch Domain Files",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "command": "bash",
        "arguments": "={{ \n  const fileIndex = $json[\"$index\"];\n  const file = $json.domain_files[fileIndex];\n  const safeContent = file.content.replace(/'/g, \"'\\\"'\\\"'\");\n  const tempFile = `/tmp/domain_${fileIndex}_${$json.repository_name}.md`;\n  \n  return `-c \"echo '${safeContent}' > ${tempFile} && docker mcp tools call create_or_update_file owner='${$json.github_owner}' repo='${$json.repository_name}' path='${file.path}' content=\\\"$(cat ${tempFile})\\\" message='Add domain: ${file.path}' branch='main' && rm -f ${tempFile}\"`;\n}}",
        "options": {}
      },
      "id": "create-domain-files",
      "name": "Create Domain Files",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "command": "bash",
        "arguments": "={{ \n  const commands = $json.structure_files.map((file, index) => {\n    const safeContent = file.content.replace(/'/g, \"'\\\"'\\\"'\");\n    const tempFile = `/tmp/structure_${index}_${$json.repository_name}.md`;\n    return `echo '${safeContent}' > ${tempFile} && docker mcp tools call create_or_update_file owner='${$json.github_owner}' repo='${$json.repository_name}' path='${file.path}' content=\\\"$(cat ${tempFile})\\\" message='Add structure: ${file.path}' branch='main' && rm -f ${tempFile}`;\n  }).join(' && ');\n  \n  return `-c \"${commands}\"`;\n}}",
        "options": {}
      },
      "id": "finalize-structure",
      "name": "Finalize Structure",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [1560, 300]
    },
    {
      "parameters": {
        "functionCode": "// Deployment Complete - Generate final response\nconst data = $json;\n\nconsole.log('=== DEPLOYMENT COMPLETE ===');\nconsole.log('Repository:', `https://github.com/${data.github_owner}/${data.repository_name}`);\n\nconst response = {\n  status: 'success',\n  message: `GitHub repository created successfully for ${data.company_name}`,\n  repository: {\n    name: data.repository_name,\n    owner: data.github_owner,\n    url: `https://github.com/${data.github_owner}/${data.repository_name}`,\n    readme_url: `https://github.com/${data.github_owner}/${data.repository_name}/blob/main/README.md`\n  },\n  structure: {\n    domains: (data.domains || []).length,\n    total_files: data.total_files || 0,\n    framework: '0-9 Business Operating System'\n  },\n  next_steps: [\n    'Visit the repository to explore the structure',\n    'Customize domain content for your business',\n    'Enable GitHub Actions for automated maintenance',\n    'Connect with daily entropy management system'\n  ],\n  timestamp: new Date().toISOString()\n};\n\nreturn [response];"
      },
      "id": "deployment-complete",
      "name": "Deployment Complete",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1780, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}"
      },
      "id": "github-response",
      "name": "GitHub Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2000, 300]
    }
  ],
  "connections": {
    "GitHub Deploy Trigger": {
      "main": [
        [
          {
            "node": "Deploy Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Deploy Status": {
      "main": [
        [
          {
            "node": "Prepare File Deployment",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare File Deployment": {
      "main": [
        [
          {
            "node": "Update Main README",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Main README": {
      "main": [
        [
          {
            "node": "Batch Domain Files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Batch Domain Files": {
      "main": [
        [
          {
            "node": "Create Domain Files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Domain Files": {
      "main": [
        [
          {
            "node": "Finalize Structure",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Finalize Structure": {
      "main": [
        [
          {
            "node": "Deployment Complete",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Deployment Complete": {
      "main": [
        [
          {
            "node": "GitHub Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {},
  "versionId": "1",
  "staticData": {},
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "tags": []
}
