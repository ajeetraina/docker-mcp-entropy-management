{
  "name": "GitHub Business OS Creator (MCP Docker)",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "create-github-structure",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "61bc8606-4087-455f-883c-f5fefdada302",
      "name": "🚀 GitHub Deploy Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -220,
        100
      ],
      "webhookId": "create-github-structure"
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "82227e4b-d8be-42e7-9a3a-7db297b01d3d",
      "name": "📢 Deploy Status",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        0,
        0
      ]
    },
    {
      "parameters": {
        "jsCode": "// Prepare GitHub repository creation with B-OS structure\nconst inputData = $('🚀 GitHub Deploy Trigger').item.json.body;\n\n// Extract B-OS data (either from Business OS Builder or manual input)\nconst companyName = inputData.company_name || 'Your Company';\nconst repositoryName = inputData.repository_name || `${companyName.toLowerCase().replace(/\\s+/g, '-')}-business-os`;\nconst githubOwner = inputData.github_owner;\n\n// Handle both business_os (from AI Builder) and domains (manual input)\nlet domains = [];\nif (inputData.business_os) {\n  // Convert AI Business OS format to domains format\n  domains = Object.keys(inputData.business_os).map(key => {\n    const domain = inputData.business_os[key];\n    return {\n      number: parseInt(key),\n      name: domain.name,\n      content: [domain.description],\n      subdomains: domain.subdomains ? Object.keys(domain.subdomains).map(subKey => ({\n        number: subKey,\n        name: domain.subdomains[subKey]\n      })) : [],\n      ai_insights: domain.ai_insights || {},\n      action_items: domain.action_items || []\n    };\n  });\n} else {\n  // Use manual domains input\n  domains = inputData.domains || inputData.structured_domains || [];\n}\n\n// Validate required inputs\nif (!githubOwner) {\n  throw new Error('github_owner is required');\n}\n\n// Generate folder structure based on 0-9 framework\nconst folderStructure = domains.map(domain => {\n  const folderName = `${domain.number.toString().padStart(2, '0')}-${domain.name.toLowerCase().replace(/[^a-z0-9]/g, '-')}`;\n  \n  // Enhanced README content with AI insights\n  let readmeContent = `# ${domain.number}. ${domain.name}\\n\\n## Overview\\n${domain.content?.join('\\n') || 'Business domain documentation and resources.'}\\n\\n`;\n  \n  // Add AI insights if available\n  if (domain.ai_insights && Object.keys(domain.ai_insights).length > 0) {\n    readmeContent += `## AI Insights\\n\\n`;\n    Object.entries(domain.ai_insights).forEach(([key, value]) => {\n      if (Array.isArray(value)) {\n        readmeContent += `**${key.replace(/_/g, ' ').toUpperCase()}:**\\n${value.map(v => `- ${v}`).join('\\n')}\\n\\n`;\n      } else {\n        readmeContent += `**${key.replace(/_/g, ' ').toUpperCase()}:** ${value}\\n\\n`;\n      }\n    });\n  }\n  \n  // Add structure section\n  if (domain.subdomains && domain.subdomains.length > 0) {\n    readmeContent += `## Structure\\n\\n${domain.subdomains.map(sub => `- **${sub.number}** ${sub.name}`).join('\\n')}\\n\\n`;\n  }\n  \n  // Add action items if available\n  if (domain.action_items && domain.action_items.length > 0) {\n    readmeContent += `## Next Actions\\n\\n${domain.action_items.map(item => `- [ ] ${item}`).join('\\n')}\\n\\n`;\n  }\n  \n  readmeContent += `## Resources\\n\\n- [ ] Documentation\\n- [ ] Templates\\n- [ ] Processes\\n- [ ] Tools & Integrations\\n\\n---\\n*Auto-generated by Entropy Management System*`;\n  \n  return {\n    domain_number: domain.number,\n    domain_name: domain.name,\n    folder_name: folderName,\n    folder_path: `${folderName}/`,\n    \n    // Create README for each domain\n    readme: {\n      path: `${folderName}/README.md`,\n      content: readmeContent\n    },\n    \n    // Create template files for each subdomain\n    subfolders: (domain.subdomains || []).map(sub => {\n      const subFolderName = sub.name.toLowerCase().replace(/[^a-z0-9]/g, '-');\n      return {\n        name: subFolderName,\n        path: `${folderName}/${subFolderName}/`,\n        template: {\n          path: `${folderName}/${subFolderName}/template.md`,\n          content: `# ${sub.number} ${sub.name}\\n\\n## Purpose\\n\\n[Define the purpose and scope of this business area]\\n\\n## Current State\\n\\n[Document current status and resources]\\n\\n## Processes\\n\\n[Define key processes and workflows]\\n\\n## Tools & Resources\\n\\n[List tools, templates, and resources]\\n\\n## Metrics & Success Criteria\\n\\n[Define how success is measured]\\n\\n## Action Items\\n\\n- [ ] [Specific action 1]\\n- [ ] [Specific action 2]\\n- [ ] [Specific action 3]\\n\\n## Notes\\n\\n[Additional notes and considerations]\\n\\n---\\n*Template generated by Entropy Management System*`\n        }\n      };\n    })\n  };\n});\n\n// Create enhanced main repository README\nconst hasAiRoadmap = inputData.ai_roadmap && Object.keys(inputData.ai_roadmap).length > 0;\nconst hasAiIntelligence = inputData.business_intelligence && Object.keys(inputData.business_intelligence).length > 0;\n\nlet mainReadmeContent = `# ${companyName} - Business Operating System\\n\\n> Systematic business organization powered by AI-driven entropy management\\n\\n## 🎯 Overview\\n\\nThis repository contains the complete Business Operating System (B-OS) for ${companyName}, organized using the systematic 0-9 framework for maximum clarity and zero organizational overhead.\\n\\n`;\n\n// Add AI insights to main README if available\nif (hasAiIntelligence) {\n  const bi = inputData.business_intelligence;\n  mainReadmeContent += `## 🤖 AI Business Intelligence\\n\\n**Business Focus:** ${bi.business_focus || 'Not specified'}\\n\\n**Core Value Proposition:** ${bi.core_value_proposition || 'Not specified'}\\n\\n**Business Model:** ${bi.business_model || 'Not specified'}\\n\\n`;\n}\n\nmainReadmeContent += `## 🏗️ Structure\\n\\n${domains.map(domain => `### ${domain.number}. ${domain.name}\\n📁 [\\`${domain.number.toString().padStart(2, '0')}-${domain.name.toLowerCase().replace(/[^a-z0-9]/g, '-')}/\\`](./${domain.number.toString().padStart(2, '0')}-${domain.name.toLowerCase().replace(/[^a-z0-9]/g, '-')}/)\\n${domain.content?.[0] || 'Business domain for ' + domain.name}\\n`).join('\\n')}`;\n\n// Add AI roadmap if available\nif (hasAiRoadmap) {\n  mainReadmeContent += `\\n\\n## 🗺️ AI-Generated Roadmap\\n\\n${Object.entries(inputData.ai_roadmap).map(([phase, data]) => `### ${data.name}\\n**Duration:** ${data.duration}\\n**Focus:** ${data.focus}\\n**Domains:** ${data.domains?.join(', ')}\\n**Priority:** ${data.ai_priority}\\n`).join('\\n')}`;\n}\n\nmainReadmeContent += `\\n\\n## 🚀 Getting Started\\n\\n1. **Browse by Domain**: Navigate to any 0-9 numbered folder\\n2. **Review Templates**: Each domain contains structured templates\\n3. **Follow Processes**: Use established workflows in each area\\n4. **Maintain Structure**: Add new content following the 0-9 framework\\n\\n## 🤖 Automation\\n\\nThis B-OS is maintained by an AI-powered entropy management system that:\\n\\n- ✅ Automatically organizes new business information\\n- ✅ Maintains cross-platform consistency\\n- ✅ Generates insights from organized data\\n- ✅ Prevents organizational chaos\\n\\n## 📊 Usage Guidelines\\n\\n### Adding New Content\\n1. Identify the appropriate 0-9 domain\\n2. Use existing templates when possible\\n3. Follow naming conventions\\n4. Update cross-references\\n\\n### Maintaining Organization\\n- Review quarterly for structural improvements\\n- Archive outdated content systematically\\n- Keep templates updated\\n- Document process changes\\n\\n## 📗 Integration\\n\\nThis GitHub structure synchronizes with:\\n- 📝 **Notion**: Knowledge base and databases\\n- 💬 **Slack**: Team communication channels\\n- 📁 **Google Drive**: Document storage\\n- 🤖 **AI Systems**: Automated organization\\n\\n---\\n\\n**Generated by**: MCP Docker Entropy Management System\\n**Last Updated**: ${new Date().toISOString()}\\n**Domains**: ${domains.length}/10\\n**Status**: ${domains.length >= 8 ? '✅ Ready for Production' : '⚠️ In Development'}${hasAiIntelligence ? '\\n**AI Model**: ' + (inputData.ai_model_used || 'AI-Enhanced') : ''}`;\n\nconst mainReadme = {\n  path: 'README.md',\n  content: mainReadmeContent\n};\n\n// Prepare GitHub configuration\nconst githubConfig = {\n  owner: githubOwner,\n  repo_name: repositoryName,\n  description: `Business Operating System for ${companyName} - Automated Entropy Management`,\n  private: inputData.private_repo !== false,\n  auto_init: true\n};\n\n// Prepare all files to create\nconst allFiles = [\n  mainReadme,\n  ...folderStructure.map(folder => folder.readme),\n  ...folderStructure.flatMap(folder => \n    folder.subfolders.map(sub => sub.template)\n  )\n];\n\nconst preparationData = {\n  company_name: companyName,\n  repository_name: repositoryName,\n  github_owner: githubOwner,\n  github_config: githubConfig,\n  folder_structure: folderStructure,\n  main_readme: mainReadme,\n  all_files: allFiles,\n  \n  // Statistics\n  stats: {\n    domains_count: domains.length,\n    folders_to_create: folderStructure.length,\n    templates_to_create: folderStructure.reduce((sum, folder) => sum + folder.subfolders.length, 0),\n    total_files: allFiles.length,\n    ai_enhanced: hasAiIntelligence\n  },\n  \n  // Validation\n  validation: {\n    has_domains: domains.length > 0,\n    has_github_owner: !!githubOwner,\n    ready_for_deployment: domains.length > 0 && !!githubOwner\n  },\n  \n  timestamp: new Date().toISOString()\n};\n\nconsole.log(`🐙 Preparing GitHub deployment for: ${companyName}`);\nconsole.log(`📁 Creating ${preparationData.stats.total_files} files across ${preparationData.stats.domains_count} domains`);\nconsole.log(`✅ Ready: ${preparationData.validation.ready_for_deployment}`);\nconsole.log(`🤖 AI Enhanced: ${preparationData.stats.ai_enhanced}`);\n\nreturn [{ json: preparationData }];"
      },
      "id": "7c08ebcd-7ef3-4ec1-942b-16041981171b",
      "name": "⚙️ Prepare GitHub Deployment",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        220,
        100
      ]
    },
    {
      "parameters": {
        "command": "docker",
        "arguments": "=mcp tools call create_repository name=\"{{ $json.repository_name }}\" description=\"{{ $json.github_config.description }}\" private={{ $json.github_config.private }} autoInit=true",
        "options": {}
      },
      "id": "ff5eae9f-5fc4-402c-8ff5-fb992da9c8a8",
      "name": "🏗️ Create Repository",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        440,
        60
      ]
    },
    {
      "parameters": {
        "command": "docker",
        "arguments": "=mcp github-official create_or_update_file --owner \"{{ $json.github_owner }}\" --repo \"{{ $json.repository_name }}\" --path \"{{ $json.main_readme.path }}\" --content \"{{ Buffer.from($json.main_readme.content).toString('base64') }}\" --message \"Initial commit: Business Operating System structure\" --branch main",
        "options": {}
      },
      "id": "6537c19f-30f9-44e6-b18e-fa1c44738209",
      "name": "📝 Create Main README",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        440,
        160
      ]
    },
    {
      "parameters": {
        "batchSize": 1,
        "inputFieldName": "folder_structure",
        "options": {}
      },
      "id": "batch_domain_files",
      "name": "📁 Batch Domain Files",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        640,
        160
      ]
    },
    {
      "parameters": {
        "command": "docker",
        "arguments": "=mcp github-official create_or_update_file --owner \"{{ $('⚙️ Prepare GitHub Deployment').item.json.github_owner }}\" --repo \"{{ $('⚙️ Prepare GitHub Deployment').item.json.repository_name }}\" --path \"{{ $json.readme.path }}\" --content \"{{ Buffer.from($json.readme.content).toString('base64') }}\" --message \"Add domain structure: {{ $json.domain_name }}\" --branch main",
        "options": {}
      },
      "id": "create_domain_files",
      "name": "📄 Create Domain Files",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        840,
        160
      ]
    },
    {
      "parameters": {
        "command": "docker",
        "arguments": "mcp tools call get_me",
        "options": {}
      },
      "id": "verify_github",
      "name": "🔍 Verify GitHub Access",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        440,
        260
      ]
    },
    {
      "parameters": {
        "jsCode": "// Create multiple domain folders and templates\nconst deploymentData = $('⚙️ Prepare GitHub Deployment').item.json;\nconst repoCreation = $('🏗️ Create Repository').item.json;\nconst githubVerification = $('🔍 Verify GitHub Access').item.json;\nconst folderStructure = deploymentData.folder_structure;\n\n// Parse GitHub user info safely\nlet authenticatedUser = 'Unknown';\ntry {\n  if (githubVerification.stdout) {\n    const userInfo = JSON.parse(githubVerification.stdout);\n    authenticatedUser = userInfo.login || 'Unknown';\n  }\n} catch (error) {\n  console.log('Could not parse GitHub user info:', error.message);\n}\n\nconst createdStructure = {\n  deployment_status: 'completed',\n  \n  repository: {\n    name: deploymentData.repository_name,\n    owner: deploymentData.github_owner,\n    url: `https://github.com/${deploymentData.github_owner}/${deploymentData.repository_name}`,\n    created_via: 'MCP Docker tools call',\n    creation_result: repoCreation.stdout ? 'Success' : (repoCreation.stderr || 'Repository created')\n  },\n  \n  github_verification: {\n    authenticated_user: authenticatedUser,\n    access_confirmed: !!githubVerification.stdout\n  },\n  \n  domains_created: folderStructure.map(folder => ({\n    domain: `${folder.domain_number}. ${folder.domain_name}`,\n    folder_name: folder.folder_name,\n    readme_path: folder.readme.path,\n    subfolders: folder.subfolders.length,\n    templates_created: folder.subfolders.map(sub => sub.template.path)\n  })),\n  \n  files_created: [\n    deploymentData.main_readme.path,\n    ...folderStructure.map(folder => folder.readme.path),\n    ...folderStructure.flatMap(folder => \n      folder.subfolders.map(sub => sub.template.path)\n    )\n  ],\n  \n  // Summary statistics\n  creation_summary: {\n    total_files: deploymentData.stats.total_files,\n    domains_structured: folderStructure.length,\n    templates_generated: deploymentData.stats.templates_to_create,\n    repository_url: `https://github.com/${deploymentData.github_owner}/${deploymentData.repository_name}`,\n    structure_type: '0-9 Systematic Business Framework',\n    mcp_integration: 'github-official MCP server',\n    ai_enhanced: deploymentData.stats.ai_enhanced || false\n  },\n  \n  // Next steps for automation\n  automation_ready: {\n    github_structure: true,\n    notion_sync_ready: true,\n    slack_channels_ready: true,\n    daily_entropy_management: true,\n    mcp_docker_active: true\n  },\n  \n  // Integration specifications\n  integration_specs: {\n    notion_workspace: `${deploymentData.company_name} Business OS`,\n    slack_channels: folderStructure.map(folder => `${folder.domain_number.toString().padStart(2, '0')}-${folder.domain_name.toLowerCase().replace(/[^a-z0-9]/g, '-')}`),\n    drive_folders: folderStructure.map(folder => folder.folder_name),\n    mcp_servers_used: ['github-official']\n  },\n  \n  next_steps: [\n    `Visit repository: https://github.com/${deploymentData.github_owner}/${deploymentData.repository_name}`,\n    'Verify all domain folders are created',\n    'Test MCP integration with: docker mcp tools call get_me',\n    'Set up Notion workspace integration',\n    'Configure Slack channels for each domain',\n    'Enable automated entropy management'\n  ],\n  \n  completion_status: 'github_structure_deployed_via_mcp',\n  timestamp: new Date().toISOString()\n};\n\nconsole.log(`🎉 GitHub Business OS deployment completed!`);\nconsole.log(`📍 Repository: ${createdStructure.repository.url}`);\nconsole.log(`👤 GitHub User: ${createdStructure.github_verification.authenticated_user}`);\nconsole.log(`📁 Files created: ${createdStructure.files_created.length}`);\nconsole.log(`🏗️ Domains: ${createdStructure.domains_created.length}`);\nconsole.log(`🐳 MCP Integration: Active (tools call)`);\nconsole.log(`🤖 AI Enhanced: ${createdStructure.creation_summary.ai_enhanced}`);\n\nreturn [{ json: createdStructure }];"
      },
      "id": "35ffd459-91d1-4a09-8751-9354deec88ff",
      "name": "🎯 Finalize Structure",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1040,
        160
      ]
    },
    {
      "parameters": {
        "options": {
          "responseCode": 200
        }
      },
      "id": "73be962d-c88e-407e-82d2-630594bc3b05",
      "name": "📋 Deployment Complete",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1240,
        160
      ]
    }
  ],
  "connections": {
    "🚀 GitHub Deploy Trigger": {
      "main": [
        [
          {
            "node": "📢 Deploy Status",
            "type": "main",
            "index": 0
          },
          {
            "node": "⚙️ Prepare GitHub Deployment",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "⚙️ Prepare GitHub Deployment": {
      "main": [
        [
          {
            "node": "🏗️ Create Repository",
            "type": "main",
            "index": 0
          },
          {
            "node": "📝 Create Main README",
            "type": "main",
            "index": 0
          },
          {
            "node": "🔍 Verify GitHub Access",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "📝 Create Main README": {
      "main": [
        [
          {
            "node": "📁 Batch Domain Files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "📁 Batch Domain Files": {
      "main": [
        [
          {
            "node": "📄 Create Domain Files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "📄 Create Domain Files": {
      "main": [
        [
          {
            "node": "🎯 Finalize Structure",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "🎯 Finalize Structure": {
      "main": [
        [
          {
            "node": "📋 Deployment Complete",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "active": true,
  "settings": {},
  "versionId": "1",
  "staticData": {},
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "tags": []
}
