{
  "name": "🏗️ Business OS Builder - Entropy Management System",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "build-business-os",
        "options": {
          "noResponseBody": false
        },
        "responseMode": "responseNode"
      },
      "id": "webhook-trigger",
      "name": "📋 Document Upload Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "build-business-os"
    },
    {
      "parameters": {
        "content": "=## 🏗️ Business OS Builder Started\n\n**Company:** {{ $json.company_name || 'Your Company' }}\n**Documents Provided:** {{ $json.documents?.length || 0 }}\n**Timestamp:** {{ new Date().toISOString() }}\n\n---\n\n### Processing Steps:\n1. ✅ Documents received\n2. 🔄 Analyzing business context with AI\n3. 🏗️ Generating 0-9 Business Framework\n4. 📊 Creating systematic structure\n5. 🚀 Preparing for platform deployment\n\nGenerating your Business Operating System...",
        "options": {}
      },
      "id": "status-update",
      "name": "📢 Processing Status",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [460, 200]
    },
    {
      "parameters": {
        "jsCode": "// Validate and prepare business documents for AI analysis\nconst inputData = $('📋 Document Upload Trigger').item.json;\n\nconst companyName = inputData.company_name || 'Your Company';\nconst documents = inputData.documents || [];\n\n// Validate required inputs\nconst requiredDocs = ['mission_vision_values', 'brand_guidelines', 'resource_inventory'];\nconst providedDocs = documents.map(doc => doc.type);\nconst missingDocs = requiredDocs.filter(req => !providedDocs.includes(req));\n\n// Prepare AI analysis prompt with Business OS Builder template\nconst businessOSPrompt = `##############################################\n# BUSINESS OPERATING SYSTEM BUILDER\n##############################################\n\nCOMPANY_NAME = \"${companyName}\"\n\nYou are running in \"Memory-Miner & Operating-System Architect\" mode.\nAnalyze the provided business documents and create a complete Business Operating System (B-OS) using the systematic 0-9 framework.\n\n🏗️ INPUT DOCUMENTS:\n${documents.map((doc, i) => `${i+1}. ${doc.type}: ${doc.content?.substring(0, 200)}...`).join('\\n')}\n\n📐 OUTPUT SPECIFICATION:\nDeliver one comprehensive Business Operating System with 0-9 numbered hierarchy.\nFor every domain include:\n- Definition (≤ 25 words)\n- Current State Assessment\n- Next Action (owner · verb · due date < 90 days)\n- Key Resources/Tools\n- Success Metrics\n\nROOT: BUSINESS OPERATING SYSTEM FOR ${companyName.toUpperCase()}\n├─ 0. FOUNDATION\n│  ├─ 0.1 Vision, Mission & Values\n│  ├─ 0.2 Legal Entity & Governance\n│  ├─ 0.3 Core Offer Definition\n│  ├─ 0.4 Brand Identity & Guidelines\n│  └─ 0.5 Strategic OKRs & Metrics\n│\n├─ 1. MARKET INTELLIGENCE & POSITIONING\n│  ├─ 1.1 Target Customer Personas\n│  ├─ 1.2 Competitive Landscape Analysis\n│  ├─ 1.3 Market Positioning Strategy\n│  ├─ 1.4 Value Proposition Framework\n│  └─ 1.5 Market Research & Insights\n│\n├─ 2. GROWTH ENGINE\n│  ├─ 2.1 Marketing Strategy & Channels\n│  ├─ 2.2 Content & Messaging Framework\n│  ├─ 2.3 Lead Generation Systems\n│  ├─ 2.4 Conversion Optimization\n│  └─ 2.5 Growth Metrics & Analytics\n│\n├─ 3. SALES PIPELINE\n│  ├─ 3.1 Sales Process & Methodology\n│  ├─ 3.2 CRM & Pipeline Management\n│  ├─ 3.3 Pricing & Proposal Framework\n│  ├─ 3.4 Customer Acquisition Costs\n│  └─ 3.5 Revenue Forecasting\n│\n├─ 4. DELIVERY & CUSTOMER SUCCESS\n│  ├─ 4.1 Service/Product Delivery Process\n│  ├─ 4.2 Quality Assurance Framework\n│  ├─ 4.3 Customer Support Systems\n│  ├─ 4.4 Success Metrics & NPS\n│  └─ 4.5 Retention & Expansion Strategy\n│\n├─ 5. PRODUCT & INNOVATION\n│  ├─ 5.1 Product Development Process\n│  ├─ 5.2 Feature Roadmap & Prioritization\n│  ├─ 5.3 User Research & Feedback Loops\n│  ├─ 5.4 Innovation Pipeline\n│  └─ 5.5 Technical Architecture\n│\n├─ 6. FINANCE & ADMINISTRATION\n│  ├─ 6.1 Financial Planning & Budgeting\n│  ├─ 6.2 Accounting & Bookkeeping\n│  ├─ 6.3 Legal & Compliance\n│  ├─ 6.4 Insurance & Risk Management\n│  └─ 6.5 Vendor & Contract Management\n│\n├─ 7. PEOPLE & CULTURE\n│  ├─ 7.1 Organizational Structure\n│  ├─ 7.2 Hiring & Onboarding Process\n│  ├─ 7.3 Performance Management\n│  ├─ 7.4 Culture & Values Implementation\n│  └─ 7.5 Knowledge Management\n│\n├─ 8. TECHNOLOGY STACK & INFRASTRUCTURE\n│  ├─ 8.1 Core Technology Architecture\n│  ├─ 8.2 Development & Deployment Pipeline\n│  ├─ 8.3 Security & Data Protection\n│  ├─ 8.4 Integration & API Management\n│  └─ 8.5 Technology Roadmap\n│\n└─ 9. GOVERNANCE & CONTINUOUS IMPROVEMENT\n   ├─ 9.1 Business Process Documentation\n   ├─ 9.2 Performance Metrics & KPIs\n   ├─ 9.3 Regular Review & Optimization\n   ├─ 9.4 Stakeholder Communication\n   └─ 9.5 Strategic Planning Process\n\n✅ QUALITY REQUIREMENTS:\n- No placeholders - every node must reference concrete, actionable items\n- Use information from provided documents where available\n- Fill gaps with industry best practices for the business type\n- Include specific tools, processes, and timelines\n- Return exactly one cohesive markdown document\n- Focus on practical implementation over theory\n\nAnalyze the business documents and generate this complete B-OS structure now.`;\n\nconst analysisData = {\n  company_name: companyName,\n  documents_provided: documents.length,\n  missing_documents: missingDocs,\n  validation_status: missingDocs.length === 0 ? 'complete' : 'partial',\n  ai_prompt: businessOSPrompt,\n  timestamp: new Date().toISOString(),\n  \n  // Prepare document content for AI\n  document_content: documents.map(doc => ({\n    type: doc.type,\n    content: doc.content,\n    length: doc.content?.length || 0\n  })),\n  \n  // Analysis configuration\n  analysis_config: {\n    max_tokens: 4000,\n    temperature: 0.3,\n    model_instruction: 'Generate comprehensive, actionable Business Operating System structure'\n  }\n};\n\nconsole.log(`🏗️ Preparing B-OS analysis for: ${companyName}`);\nconsole.log(`📋 Documents: ${documents.length}, Missing: ${missingDocs.length}`);\n\nreturn [{ json: analysisData }];"
      },
      "id": "prepare-analysis",
      "name": "⚙️ Prepare B-OS Analysis",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "url": "=http://model-runner.docker.internal:12434/engines/v1/chat/completions",
        "authentication": "none",
        "requestMethod": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "ai/llama3.2:1B-Q8_0"
            },
            {
              "name": "messages",
              "value": "=[{\"role\": \"system\", \"content\": \"You are an expert business architect specialized in creating systematic organizational structures. Generate comprehensive, actionable business frameworks.\"}, {\"role\": \"user\", \"content\": \"{{ $json.ai_prompt }}\"}]"
            },
            {
              "name": "max_tokens",
              "value": "={{ $json.analysis_config.max_tokens }}"
            },
            {
              "name": "temperature",
              "value": "={{ $json.analysis_config.temperature }}"
            }
          ]
        },
        "options": {}
      },
      "id": "ai-bos-generation",
      "name": "🤖 AI B-OS Generation",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [900, 300]
    },
    {
      "parameters": {
        "jsCode": "// Process and structure the AI-generated Business Operating System\nconst analysisData = $('⚙️ Prepare B-OS Analysis').item.json;\nconst aiResponse = $('🤖 AI B-OS Generation').item.json;\n\n// Extract the generated B-OS structure\nconst businessOS = aiResponse.choices?.[0]?.message?.content || 'B-OS generation failed';\nconst usage = aiResponse.usage || {};\n\n// Parse and validate the B-OS structure\nconst bosLines = businessOS.split('\\n');\nconst domains = [];\nlet currentDomain = null;\n\n// Extract 0-9 domains from the generated content\nbosLines.forEach(line => {\n  const domainMatch = line.match(/^[├└]─\\s*(\\d)\\.(.*?)$/);  \n  if (domainMatch) {\n    if (currentDomain) domains.push(currentDomain);\n    currentDomain = {\n      number: parseInt(domainMatch[1]),\n      name: domainMatch[2].trim(),\n      subdomains: [],\n      content: []\n    };\n  } else if (line.match(/^│\\s+[├└]─\\s*(\\d\\.\\d)/) && currentDomain) {\n    const subMatch = line.match(/^│\\s+[├└]─\\s*(\\d\\.\\d)\\s+(.*?)$/);\n    if (subMatch) {\n      currentDomain.subdomains.push({\n        number: subMatch[1],\n        name: subMatch[2].trim()\n      });\n    }\n  } else if (currentDomain && line.trim()) {\n    currentDomain.content.push(line.trim());\n  }\n});\nif (currentDomain) domains.push(currentDomain);\n\n// Generate implementation roadmap\nconst implementationPhases = [\n  {\n    phase: 1,\n    name: 'Foundation Setup',\n    domains: [0, 8, 9],\n    timeline: 'Week 1-2',\n    description: 'Establish core foundation, tech infrastructure, and governance'\n  },\n  {\n    phase: 2, \n    name: 'Market & Product',\n    domains: [1, 5],\n    timeline: 'Week 3-4',\n    description: 'Define market positioning and product strategy'\n  },\n  {\n    phase: 3,\n    name: 'Revenue Engine',\n    domains: [2, 3],\n    timeline: 'Week 5-6', \n    description: 'Build growth and sales systems'\n  },\n  {\n    phase: 4,\n    name: 'Operations & Scale',\n    domains: [4, 6, 7],\n    timeline: 'Week 7-8',\n    description: 'Implement delivery, finance, and people systems'\n  }\n];\n\n// Create platform creation specifications\nconst platformSpecs = {\n  github: {\n    repository_name: `${analysisData.company_name.toLowerCase().replace(/\\s+/g, '-')}-business-os`,\n    description: `Business Operating System for ${analysisData.company_name}`,\n    folders: domains.map(domain => ({\n      name: `${domain.number}-${domain.name.toLowerCase().replace(/[^a-z0-9]/g, '-')}`,\n      readme_content: `# ${domain.number}. ${domain.name}\\n\\n${domain.content.join('\\n')}`,\n      subfolders: domain.subdomains.map(sub => sub.name.toLowerCase().replace(/[^a-z0-9]/g, '-'))\n    }))\n  },\n  notion: {\n    workspace_name: `${analysisData.company_name} Business OS`,\n    databases: domains.map(domain => ({\n      name: `${domain.number}-${domain.name}`,\n      properties: ['Status', 'Owner', 'Due Date', 'Priority', 'Resources']\n    }))\n  },\n  slack: {\n    channels: domains.map(domain => ({\n      name: `${domain.number.toString().padStart(2, '0')}-${domain.name.toLowerCase().replace(/[^a-z0-9]/g, '-')}`,\n      description: `${domain.name} - ${domain.content[0] || 'Business domain discussions'}`.substring(0, 250)\n    }))\n  }\n};\n\nconst results = {\n  // Core B-OS data\n  company_name: analysisData.company_name,\n  business_operating_system: businessOS,\n  structured_domains: domains,\n  domain_count: domains.length,\n  \n  // Implementation planning\n  implementation_phases: implementationPhases,\n  estimated_completion: '8 weeks',\n  \n  // Platform specifications\n  platform_creation_specs: platformSpecs,\n  \n  // AI processing metrics\n  generation_metrics: {\n    tokens_used: usage.total_tokens || 0,\n    processing_time_ms: new Date().getTime() - new Date(analysisData.timestamp).getTime(),\n    model_used: 'ai/llama3.2:1B-Q8_0',\n    content_length: businessOS.length\n  },\n  \n  // Status and next steps\n  status: 'b-os_generated',\n  next_actions: [\n    'Review generated Business Operating System structure',\n    'Customize domains based on specific business needs', \n    'Deploy structure to GitHub, Notion, and Slack',\n    'Implement daily entropy management automation',\n    'Begin systematic business organization'\n  ],\n  \n  // Export formats\n  exports: {\n    markdown: businessOS,\n    json_structure: domains,\n    implementation_guide: implementationPhases\n  },\n  \n  // Quality assessment\n  quality_metrics: {\n    domains_generated: domains.length,\n    expected_domains: 10,\n    completeness: Math.round((domains.length / 10) * 100),\n    ready_for_deployment: domains.length >= 8\n  }\n};\n\nconsole.log(`🏗️ B-OS generated: ${domains.length} domains, ${usage.total_tokens || 0} tokens`);\nconsole.log(`📊 Completeness: ${results.quality_metrics.completeness}%`);\nconsole.log(`🚀 Ready for deployment: ${results.quality_metrics.ready_for_deployment}`);\n\nreturn [{ json: results }];"
      },
      "id": "structure-bos",
      "name": "🏗️ Structure B-OS Framework",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "content": "=# 🎉 Business Operating System Generated!\n\n## 📊 System Overview\n**Company:** {{ $json.company_name }}\n**Domains Created:** {{ $json.domain_count }}/10\n**Completeness:** {{ $json.quality_metrics.completeness }}%\n**Ready for Deployment:** {{ $json.quality_metrics.ready_for_deployment ? '✅ Yes' : '⚠️ Needs Review' }}\n\n## 🏗️ Generated B-OS Structure\n{{ $json.business_operating_system }}\n\n## 🚀 Implementation Roadmap\n{{ $json.implementation_phases.map(phase => `**Phase ${phase.phase}: ${phase.name}** (${phase.timeline})\\n${phase.description}\\nDomains: ${phase.domains.join(', ')}`).join('\\n\\n') }}\n\n## 📈 Next Steps\n{{ $json.next_actions.map(action => `• ${action}`).join('\\n') }}\n\n## ⚡ Generation Metrics\n- **Processing Time:** {{ $json.generation_metrics.processing_time_ms }}ms\n- **Tokens Used:** {{ $json.generation_metrics.tokens_used }}\n- **Content Length:** {{ $json.generation_metrics.content_length }} characters\n- **Model:** {{ $json.generation_metrics.model_used }}\n\n---\n*🎯 Your Business Operating System is ready for platform deployment!*\n*Use the GitHub Structure Creator workflow to implement across platforms.*",
        "options": {
          "responseCode": 200
        }
      },
      "id": "final-response",
      "name": "📋 B-OS Complete Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1340, 300]
    }
  ],
  "connections": {
    "📋 Document Upload Trigger": {
      "main": [
        [
          {
            "node": "📢 Processing Status",
            "type": "main",
            "index": 0
          },
          {
            "node": "⚙️ Prepare B-OS Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "⚙️ Prepare B-OS Analysis": {
      "main": [
        [
          {
            "node": "🤖 AI B-OS Generation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "🤖 AI B-OS Generation": {
      "main": [
        [
          {
            "node": "🏗️ Structure B-OS Framework",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "🏗️ Structure B-OS Framework": {
      "main": [
        [
          {
            "node": "📋 B-OS Complete Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": ["entropy-management", "business-os", "ai-automation"],
  "triggerCount": 0,
  "updatedAt": "2025-06-22T10:00:00.000Z",
  "versionId": "1"
}
