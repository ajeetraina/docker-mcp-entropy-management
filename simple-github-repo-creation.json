{
  "name": "GitHub Creator - FIXED POST Methods",
  "nodes": [
    {
      "parameters": {
        "path": "create-github-structure",
        "httpMethod": "POST",
        "options": {}
      },
      "id": "webhook-start",
      "name": "📥 Webhook Start",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [200, 400],
      "webhookId": "github-structure-fixed-post"
    },
    {
      "parameters": {
        "jsCode": "// Process input data\nconst data = $input.first().json.body || $input.first().json;\n\n// Extract required fields\nconst company = data.company_name || 'Test Company';\nconst repo = data.repository_name || 'test-repo';\nconst owner = data.github_owner || 'ajeetraina';\nconst domains = data.domains || [];\n\nconsole.log(`Creating repo: ${owner}/${repo} for ${company}`);\nconsole.log(`Domains: ${domains.length}`);\n\n// Generate main README\nlet readme = `# ${company} - Business Operating System\\n\\n`;\nreadme += `## 🏗️ Systematic Business Organization\\n\\n`;\nreadme += `This repository contains the Business Operating System for **${company}**.\\n\\n`;\nreadme += `**Created:** ${new Date().toISOString().split('T')[0]}\\n`;\nreadme += `**Repository:** https://github.com/${owner}/${repo}\\n\\n`;\n\nif (domains.length > 0) {\n  readme += `## 📊 Business Domains\\n\\n`;\n  domains.forEach(domain => {\n    const num = domain.number || 'X';\n    const name = domain.name || 'Domain';\n    const folder = `${num}-${name.replace(/\\s+/g, '-')}`;\n    \n    readme += `### ${num} - ${name}\\n`;\n    if (domain.content && Array.isArray(domain.content)) {\n      readme += `**Focus:** ${domain.content.join(', ')}\\n`;\n    }\n    readme += `- [📁 ${name}](./${folder}/)\\n\\n`;\n  });\n  \n  readme += `## 🎯 Quick Navigation\\n\\n`;\n  domains.forEach(domain => {\n    const folder = `${domain.number}-${domain.name.replace(/\\s+/g, '-')}`;\n    readme += `- [${domain.number} - ${domain.name}](./${folder}/)\\n`;\n  });\n  readme += `\\n`;\n}\n\nreadme += `## 🚀 Features\\n\\n`;\nreadme += `- ✅ Systematic organization using 0-9 framework\\n`;\nreadme += `- ✅ Clear navigation and structure\\n`;\nreadme += `- ✅ AI-powered entropy management\\n`;\nreadme += `- ✅ Scalable business operations\\n\\n`;\n\nreadme += `---\\n`;\nreadme += `**Generated by:** Docker MCP + n8n Workflow\\n`;\nreadme += `**Framework:** AI-Powered Entropy Management System`;\n\n// Generate domain files\nconst files = [];\ndomains.forEach(domain => {\n  const folder = `${domain.number}-${domain.name.replace(/\\s+/g, '-')}`;\n  \n  let domainContent = `# ${domain.number} - ${domain.name}\\n\\n`;\n  domainContent += `## Overview\\n\\n`;\n  if (domain.content && Array.isArray(domain.content)) {\n    domainContent += `**Core areas:** ${domain.content.join(', ')}\\n\\n`;\n  }\n  domainContent += `This domain organizes all ${domain.name.toLowerCase()} activities for ${company}.\\n\\n`;\n  \n  // Add subdomains if they exist\n  if (domain.subdomains && Array.isArray(domain.subdomains)) {\n    domainContent += `## Subdomains\\n\\n`;\n    domain.subdomains.forEach(sub => {\n      const subFolder = `${sub.number.replace('.', '-')}-${sub.name.replace(/\\s+/g, '-')}`;\n      domainContent += `### ${sub.number} - ${sub.name}\\n`;\n      domainContent += `- [📂 ${sub.name}](./${subFolder}/)\\n\\n`;\n      \n      // Create subdomain file\n      files.push({\n        path: `${folder}/${subFolder}/README.md`,\n        content: `# ${sub.number} - ${sub.name}\\n\\n## Purpose\\n\\nSystematic organization for ${sub.name} within the ${domain.name} domain.\\n\\n## Structure\\n\\n- [ ] Documentation\\n- [ ] Templates\\n- [ ] Resources\\n- [ ] Processes\\n\\n**Domain:** ${domain.number} - ${domain.name}\\n**Updated:** ${new Date().toISOString().split('T')[0]}`\n      });\n    });\n  }\n  \n  domainContent += `## Templates\\n\\n- [ ] Strategy Document\\n- [ ] Process Documentation\\n- [ ] Action Items\\n\\n**Last Updated:** ${new Date().toISOString().split('T')[0]}`;\n  \n  files.push({\n    path: `${folder}/README.md`,\n    content: domainContent\n  });\n});\n\nconsole.log(`Generated ${files.length} files`);\n\nreturn {\n  json: {\n    company_name: company,\n    repository_name: repo,\n    github_owner: owner,\n    main_readme: readme,\n    files: files\n  }\n};"
      },
      "id": "process-data",
      "name": "🔄 Process Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [400, 400]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "url": "http://host.docker.internal:3001/tools/create_or_update_file",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyContentType": "json",
        "jsonBody": "={\n  \"owner\": {{ JSON.stringify($json.github_owner) }},\n  \"repo\": {{ JSON.stringify($json.repository_name) }},\n  \"path\": \"README.md\",\n  \"content\": {{ JSON.stringify($json.main_readme) }},\n  \"message\": {{ JSON.stringify(\"Create Business OS for \" + $json.company_name) }},\n  \"branch\": \"main\"\n}",
        "options": {
          "timeout": 30000
        }
      },
      "id": "create-readme",
      "name": "📄 Create Main README",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [600, 400]
    },
    {
      "parameters": {
        "batchSize": 1,
        "options": {},
        "fieldName": "files"
      },
      "id": "split-files",
      "name": "📁 Split Files",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 1,
      "position": [800, 400]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "url": "http://host.docker.internal:3001/tools/create_or_update_file",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyContentType": "json",
        "jsonBody": "={\n  \"owner\": {{ JSON.stringify($json.github_owner) }},\n  \"repo\": {{ JSON.stringify($json.repository_name) }},\n  \"path\": {{ JSON.stringify($json.path) }},\n  \"content\": {{ JSON.stringify($json.content) }},\n  \"message\": {{ JSON.stringify(\"Create domain structure for \" + $json.company_name) }},\n  \"branch\": \"main\"\n}",
        "options": {
          "timeout": 30000
        }
      },
      "id": "create-files",
      "name": "📂 Create Domain Files",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1000, 400]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "status",
              "value": "completed"
            },
            {
              "name": "company_name",
              "value": "={{ $json.company_name }}"
            },
            {
              "name": "repository_name",
              "value": "={{ $json.repository_name }}"
            },
            {
              "name": "github_owner",
              "value": "={{ $json.github_owner }}"
            },
            {
              "name": "files_created",
              "value": "={{ $json.files ? $json.files.length + 1 : 1 }}"
            },
            {
              "name": "repository_url",
              "value": "https://github.com/{{ $json.github_owner }}/{{ $json.repository_name }}"
            },
            {
              "name": "message",
              "value": "Successfully created GitHub repository structure for {{ $json.company_name }}"
            },
            {
              "name": "timestamp",
              "value": "={{ new Date().toISOString() }}"
            }
          ]
        }
      },
      "id": "final-response",
      "name": "📤 Build Response",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [1200, 400]
    }
  ],
  "connections": {
    "📥 Webhook Start": {
      "main": [
        [
          {
            "node": "🔄 Process Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "🔄 Process Data": {
      "main": [
        [
          {
            "node": "📄 Create Main README",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "📄 Create Main README": {
      "main": [
        [
          {
            "node": "📁 Split Files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "📁 Split Files": {
      "main": [
        [
          {
            "node": "📂 Create Domain Files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "📂 Create Domain Files": {
      "main": [
        [
          {
            "node": "📤 Build Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {},
  "versionId": "fixed-post-methods-v1"
}
