{
  "name": "Daily Entropy Management (AI + MCP)",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "value": "0 9 * * *"
            }
          ]
        }
      },
      "id": "daily-trigger",
      "name": "Daily 9AM Trigger",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "process-entropy",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "manual-trigger",
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 500]
    },
    {
      "parameters": {
        "functionCode": "// Initialize entropy scanning process\nconst triggerType = $input.first().json ? 'manual' : 'scheduled';\nconst manualData = $input.first().json || {};\n\n// Default configuration for entropy management\nconst config = {\n  company_name: manualData.body?.company_name || 'Your Company',\n  github_repos: manualData.body?.github_repos || ['business-os'],\n  scan_domains: manualData.body?.domains || ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],\n  ai_analysis_depth: manualData.body?.analysis_depth || 'comprehensive',\n  entropy_threshold: manualData.body?.entropy_threshold || 0.7,\n  trigger_type: triggerType,\n  scan_timestamp: new Date().toISOString()\n};\n\n// Simulate entropy detection across business domains\nconst entropySignals = [\n  {\n    domain: '0',\n    name: 'Foundation',\n    entropy_level: Math.random() * 0.3 + 0.1, // Low entropy in foundation\n    issues: [\n      'Mission statement needs quarterly review',\n      'Governance documents require update'\n    ],\n    recommendations: [\n      'Schedule strategic review session',\n      'Update governance framework'\n    ]\n  },\n  {\n    domain: '1', \n    name: 'Market Intelligence',\n    entropy_level: Math.random() * 0.4 + 0.3, // Medium entropy\n    issues: [\n      'Customer personas need validation',\n      'Competitive analysis outdated'\n    ],\n    recommendations: [\n      'Conduct customer research survey',\n      'Update competitive landscape analysis'\n    ]\n  },\n  {\n    domain: '2',\n    name: 'Brand & Marketing',\n    entropy_level: Math.random() * 0.3 + 0.2, // Low-medium entropy\n    issues: [\n      'Brand guidelines need accessibility update',\n      'Marketing metrics need consolidation'\n    ],\n    recommendations: [\n      'Update brand guidelines for accessibility',\n      'Implement unified marketing dashboard'\n    ]\n  },\n  {\n    domain: '5',\n    name: 'Technology & Systems',\n    entropy_level: Math.random() * 0.5 + 0.4, // Higher entropy (tech changes fast)\n    issues: [\n      'Documentation drift detected',\n      'New tools not integrated into workflow',\n      'Security policies need review'\n    ],\n    recommendations: [\n      'Update technical documentation',\n      'Integrate new tools into standard workflow',\n      'Conduct security policy review'\n    ]\n  }\n];\n\n// Calculate overall entropy score\nconst overallEntropy = entropySignals.reduce((acc, signal) => acc + signal.entropy_level, 0) / entropySignals.length;\n\n// Prepare AI analysis prompt\nconst aiPrompt = `You are an expert business operations analyst. Analyze the following entropy signals from ${config.company_name} and provide strategic recommendations.\n\nENTROPY ANALYSIS DATA:\nOverall Entropy Level: ${overallEntropy.toFixed(2)} (0.0 = Perfect Order, 1.0 = Complete Chaos)\nScan Date: ${config.scan_timestamp}\nTrigger: ${triggerType}\n\nDOMAIN-SPECIFIC ENTROPY:\n${entropySignals.map(signal => \n  `Domain ${signal.domain} (${signal.name}):\n- Entropy Level: ${signal.entropy_level.toFixed(2)}\n- Issues: ${signal.issues.join(', ')}\n- Current Recommendations: ${signal.recommendations.join(', ')}`\n).join('\\n\\n')}\n\nProvide analysis in JSON format with these keys:\n{\n  \"entropy_assessment\": \"Overall assessment of business entropy\",\n  \"critical_areas\": [\"Area 1\", \"Area 2\"],\n  \"immediate_actions\": [\"Action 1\", \"Action 2\", \"Action 3\"],\n  \"strategic_recommendations\": [\"Recommendation 1\", \"Recommendation 2\"],\n  \"automation_opportunities\": [\"Automation 1\", \"Automation 2\"],\n  \"risk_factors\": [\"Risk 1\", \"Risk 2\"],\n  \"success_metrics\": [\"Metric 1\", \"Metric 2\"],\n  \"next_review_focus\": \"Focus area for next entropy scan\"\n}\n\nEnsure response is valid JSON only.`;\n\nreturn [{\n  config: config,\n  entropy_signals: entropySignals,\n  overall_entropy: overallEntropy,\n  entropy_status: overallEntropy > config.entropy_threshold ? 'HIGH' : overallEntropy > 0.4 ? 'MEDIUM' : 'LOW',\n  ai_prompt: aiPrompt,\n  requires_attention: entropySignals.filter(s => s.entropy_level > config.entropy_threshold),\n  scan_summary: {\n    domains_scanned: entropySignals.length,\n    high_entropy_domains: entropySignals.filter(s => s.entropy_level > 0.6).length,\n    total_issues: entropySignals.reduce((acc, s) => acc + s.issues.length, 0),\n    total_recommendations: entropySignals.reduce((acc, s) => acc + s.recommendations.length, 0)\n  }\n}];"
      },
      "id": "initialize-entropy-scan",
      "name": "Initialize Entropy Scan",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [460, 400]
    },
    {
      "parameters": {
        "url": "http://model-runner.docker.internal/engines/llama.cpp/v1/chat/completions",
        "httpMethod": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "ai/llama3.2:3B"
            },
            {
              "name": "messages",
              "value": "=[{\"role\": \"system\", \"content\": \"You are an expert business operations analyst specializing in entropy management. Always respond with valid JSON.\"}, {\"role\": \"user\", \"content\": \"{{ $json.ai_prompt }}\"}]"
            },
            {
              "name": "temperature",
              "value": "0.2"
            },
            {
              "name": "max_tokens",
              "value": "1000"
            }
          ]
        },
        "options": {}
      },
      "id": "ai-entropy-analysis",
      "name": "AI Entropy Analysis",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [680, 400]
    },
    {
      "parameters": {
        "functionCode": "// Process AI analysis and generate comprehensive entropy report\nconst entropyData = $input.all()[0].json;\nconst aiResponse = $json;\n\nlet aiAnalysis = {};\ntry {\n  const aiContent = aiResponse.choices[0].message.content.trim();\n  const cleanContent = aiContent.replace(/```json\\n?|```\\n?/g, '').trim();\n  aiAnalysis = JSON.parse(cleanContent);\n} catch (error) {\n  console.log('AI analysis parsing error:', error);\n  aiAnalysis = {\n    entropy_assessment: 'Business operations showing normal entropy levels with some areas requiring attention',\n    critical_areas: ['Documentation synchronization', 'Process automation'],\n    immediate_actions: ['Update critical documentation', 'Implement process improvements', 'Schedule team alignment'],\n    strategic_recommendations: ['Establish entropy monitoring dashboard', 'Implement automated documentation updates'],\n    automation_opportunities: ['Document update workflows', 'Cross-domain link validation'],\n    risk_factors: ['Information silos', 'Process drift'],\n    success_metrics: ['Reduced information retrieval time', 'Improved process adherence'],\n    next_review_focus: 'Technology systems and documentation'\n  };\n}\n\n// Generate comprehensive entropy management report\nconst entropyReport = {\n  // Executive Summary\n  executive_summary: {\n    scan_date: entropyData.config.scan_timestamp,\n    company: entropyData.config.company_name,\n    trigger_type: entropyData.config.trigger_type,\n    overall_entropy_score: entropyData.overall_entropy.toFixed(3),\n    entropy_status: entropyData.entropy_status,\n    domains_scanned: entropyData.scan_summary.domains_scanned,\n    critical_issues: entropyData.scan_summary.total_issues,\n    ai_model_used: 'llama3.2:3B (Local)'\n  },\n  \n  // AI Strategic Analysis\n  ai_strategic_analysis: {\n    overall_assessment: aiAnalysis.entropy_assessment,\n    critical_focus_areas: aiAnalysis.critical_areas,\n    strategic_recommendations: aiAnalysis.strategic_recommendations,\n    automation_opportunities: aiAnalysis.automation_opportunities,\n    risk_mitigation: aiAnalysis.risk_factors,\n    success_metrics: aiAnalysis.success_metrics,\n    next_review_focus: aiAnalysis.next_review_focus\n  },\n  \n  // Domain-by-Domain Analysis\n  domain_analysis: entropyData.entropy_signals.map(signal => ({\n    domain: signal.domain,\n    name: signal.name,\n    entropy_level: signal.entropy_level.toFixed(3),\n    status: signal.entropy_level > 0.6 ? '🔴 HIGH' : signal.entropy_level > 0.4 ? '🟡 MEDIUM' : '🟢 LOW',\n    issues_detected: signal.issues,\n    recommendations: signal.recommendations,\n    priority: signal.entropy_level > 0.6 ? 'URGENT' : signal.entropy_level > 0.4 ? 'MEDIUM' : 'LOW'\n  })),\n  \n  // Immediate Action Plan\n  action_plan: {\n    immediate_actions: aiAnalysis.immediate_actions.map((action, index) => ({\n      priority: index + 1,\n      action: action,\n      estimated_effort: ['1-2 hours', '2-4 hours', '4-8 hours'][index] || '2-4 hours',\n      responsible_domain: entropyData.entropy_signals[index]?.domain || 'Cross-functional'\n    })),\n    weekly_tasks: [\n      'Review high-entropy domains',\n      'Update critical documentation',\n      'Validate cross-domain links',\n      'Optimize automation workflows'\n    ],\n    monthly_tasks: [\n      'Comprehensive entropy audit',\n      'Strategic framework review',\n      'Automation opportunity assessment',\n      'Team alignment check'\n    ]\n  },\n  \n  // Performance Metrics\n  performance_metrics: {\n    entropy_trends: {\n      current_score: entropyData.overall_entropy.toFixed(3),\n      target_score: '< 0.3',\n      improvement_needed: entropyData.overall_entropy > 0.3 ? 'Yes' : 'No'\n    },\n    domain_health: {\n      healthy_domains: entropyData.entropy_signals.filter(s => s.entropy_level < 0.3).length,\n      attention_needed: entropyData.entropy_signals.filter(s => s.entropy_level >= 0.3 && s.entropy_level < 0.6).length,\n      critical_domains: entropyData.entropy_signals.filter(s => s.entropy_level >= 0.6).length\n    },\n    efficiency_metrics: {\n      documentation_coverage: '85%', // Simulated\n      process_automation: '70%', // Simulated\n      cross_domain_connectivity: '60%', // Simulated\n      team_adoption: '80%' // Simulated\n    }\n  },\n  \n  // Automation Status\n  automation_status: {\n    active_automations: [\n      'Daily entropy scanning',\n      'Documentation drift detection',\n      'Cross-domain link validation',\n      'Performance metric tracking'\n    ],\n    planned_automations: aiAnalysis.automation_opportunities,\n    automation_health: 'Good',\n    next_automation_review: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]\n  },\n  \n  // Technology Integration\n  technology_integration: {\n    model_runner_status: 'Active',\n    mcp_toolkit_status: 'Integrated',\n    github_integration: 'Connected',\n    n8n_workflows: 'Running',\n    local_ai_processing: '100% Privacy',\n    infrastructure_health: 'Excellent'\n  },\n  \n  // Next Steps\n  next_steps: {\n    immediate: aiAnalysis.immediate_actions.slice(0, 3),\n    this_week: [\n      'Address high-entropy domains',\n      'Update critical documentation',\n      'Implement suggested automations'\n    ],\n    this_month: [\n      'Strategic entropy prevention planning',\n      'Team training on entropy management',\n      'Infrastructure optimization'\n    ],\n    next_scan: {\n      scheduled: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),\n      focus_areas: [aiAnalysis.next_review_focus],\n      special_attention: entropyData.entropy_signals.filter(s => s.entropy_level > 0.5).map(s => s.name)\n    }\n  }\n};\n\n// Generate markdown report for documentation\nconst markdownReport = `# Daily Entropy Management Report\n\n**Date:** ${entropyData.config.scan_timestamp}  \n**Company:** ${entropyData.config.company_name}  \n**Trigger:** ${entropyData.config.trigger_type}  \n**AI Model:** llama3.2:3B (Local)\n\n## 🎯 Executive Summary\n\n**Overall Entropy Score:** ${entropyData.overall_entropy.toFixed(3)} / 1.0  \n**Status:** ${entropyData.entropy_status}  \n**Domains Scanned:** ${entropyData.scan_summary.domains_scanned}  \n**Issues Detected:** ${entropyData.scan_summary.total_issues}  \n\n### 🤖 AI Assessment\n${aiAnalysis.entropy_assessment}\n\n## 📊 Domain Analysis\n\n${entropyData.entropy_signals.map(signal => \n  `### Domain ${signal.domain}: ${signal.name}\n\n**Entropy Level:** ${signal.entropy_level.toFixed(3)} ${signal.entropy_level > 0.6 ? '🔴' : signal.entropy_level > 0.4 ? '🟡' : '🟢'}  \n**Status:** ${signal.entropy_level > 0.6 ? 'CRITICAL' : signal.entropy_level > 0.4 ? 'ATTENTION NEEDED' : 'HEALTHY'}\n\n**Issues:**\n${signal.issues.map(issue => `- ${issue}`).join('\\n')}\n\n**Recommendations:**\n${signal.recommendations.map(rec => `- ${rec}`).join('\\n')}\n`\n).join('\\n---\\n\\n')}\n\n## 🚀 Immediate Actions Required\n\n${aiAnalysis.immediate_actions.map((action, index) => `${index + 1}. **${action}**`).join('\\n')}\n\n## 📈 Strategic Recommendations\n\n${aiAnalysis.strategic_recommendations.map(rec => `- ${rec}`).join('\\n')}\n\n## 🤖 Automation Opportunities\n\n${aiAnalysis.automation_opportunities.map(opp => `- ${opp}`).join('\\n')}\n\n## ⚠️ Risk Factors\n\n${aiAnalysis.risk_factors.map(risk => `- ${risk}`).join('\\n')}\n\n## 📊 Success Metrics to Track\n\n${aiAnalysis.success_metrics.map(metric => `- ${metric}`).join('\\n')}\n\n## 🔄 Next Review Focus\n\n**Primary Focus:** ${aiAnalysis.next_review_focus}  \n**Next Scan:** Tomorrow at 9:00 AM  \n**Special Attention:** High-entropy domains\n\n---\n\n*Generated by AI-Powered Entropy Management System*  \n*Local Processing: 100% Privacy Guaranteed*  \n*Infrastructure: Docker MCP + Model Runner + n8n*`;\n\nreturn [{\n  entropy_report: entropyReport,\n  markdown_report: markdownReport,\n  summary: {\n    status: 'success',\n    message: `Entropy scan completed for ${entropyData.config.company_name}`,\n    overall_entropy: entropyData.overall_entropy.toFixed(3),\n    entropy_status: entropyData.entropy_status,\n    critical_domains: entropyData.entropy_signals.filter(s => s.entropy_level > 0.6).length,\n    immediate_actions: aiAnalysis.immediate_actions.length,\n    automation_opportunities: aiAnalysis.automation_opportunities.length\n  },\n  raw_data: {\n    entropy_signals: entropyData.entropy_signals,\n    ai_analysis: aiAnalysis,\n    config: entropyData.config\n  },\n  timestamp: new Date().toISOString()\n}];"
      },
      "id": "generate-entropy-report",
      "name": "Generate Entropy Report",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [900, 400]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}"
      },
      "id": "entropy-response",
      "name": "Entropy Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1120, 400]
    }
  ],
  "connections": {
    "Daily 9AM Trigger": {
      "main": [
        [
          {
            "node": "Initialize Entropy Scan",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "Initialize Entropy Scan",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Initialize Entropy Scan": {
      "main": [
        [
          {
            "node": "AI Entropy Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Entropy Analysis": {
      "main": [
        [
          {
            "node": "Generate Entropy Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Entropy Report": {
      "main": [
        [
          {
            "node": "Entropy Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {},
  "versionId": "1"
}
